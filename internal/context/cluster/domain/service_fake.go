// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/cluster/domain/service.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FakeService is a mock of Service interface.
type FakeService struct {
	ctrl     *gomock.Controller
	recorder *FakeServiceMockRecorder
}

// FakeServiceMockRecorder is the mock recorder for FakeService.
type FakeServiceMockRecorder struct {
	mock *FakeService
}

// NewFakeService creates a new mock instance.
func NewFakeService(ctrl *gomock.Controller) *FakeService {
	mock := &FakeService{ctrl: ctrl}
	mock.recorder = &FakeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeService) EXPECT() *FakeServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *FakeService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *FakeServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*FakeService)(nil).Delete), ctx, id)
}

// Put mocks base method.
func (m *FakeService) Put(ctx context.Context, cluster *Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *FakeServiceMockRecorder) Put(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*FakeService)(nil).Put), ctx, cluster)
}
