// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/cluster/domain/repo.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FakeRepo is a mock of Repo interface.
type FakeRepo struct {
	ctrl     *gomock.Controller
	recorder *FakeRepoMockRecorder
}

// FakeRepoMockRecorder is the mock recorder for FakeRepo.
type FakeRepoMockRecorder struct {
	mock *FakeRepo
}

// NewFakeRepo creates a new mock instance.
func NewFakeRepo(ctrl *gomock.Controller) *FakeRepo {
	mock := &FakeRepo{ctrl: ctrl}
	mock.recorder = &FakeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeRepo) EXPECT() *FakeRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *FakeRepo) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *FakeRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*FakeRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *FakeRepo) Get(ctx context.Context, id string) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeRepoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeRepo)(nil).Get), ctx, id)
}

// Save mocks base method.
func (m *FakeRepo) Save(ctx context.Context, cluster *Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *FakeRepoMockRecorder) Save(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*FakeRepo)(nil).Save), ctx, cluster)
}
