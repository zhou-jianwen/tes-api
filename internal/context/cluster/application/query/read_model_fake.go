// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/cluster/application/query/read_model.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FakeReadModel is a mock of ReadModel interface.
type FakeReadModel struct {
	ctrl     *gomock.Controller
	recorder *FakeReadModelMockRecorder
}

// FakeReadModelMockRecorder is the mock recorder for FakeReadModel.
type FakeReadModelMockRecorder struct {
	mock *FakeReadModel
}

// NewFakeReadModel creates a new mock instance.
func NewFakeReadModel(ctrl *gomock.Controller) *FakeReadModel {
	mock := &FakeReadModel{ctrl: ctrl}
	mock.recorder = &FakeReadModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeReadModel) EXPECT() *FakeReadModelMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *FakeReadModel) List(ctx context.Context, filter *ListFilter) ([]*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeReadModelMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeReadModel)(nil).List), ctx, filter)
}
