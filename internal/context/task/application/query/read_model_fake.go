// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/task/application/query/read_model.go

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	utils "code.byted.org/epscp/vetes-api/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// FakeReadModel is a mock of ReadModel interface.
type FakeReadModel struct {
	ctrl     *gomock.Controller
	recorder *FakeReadModelMockRecorder
}

// FakeReadModelMockRecorder is the mock recorder for FakeReadModel.
type FakeReadModelMockRecorder struct {
	mock *FakeReadModel
}

// NewFakeReadModel creates a new mock instance.
func NewFakeReadModel(ctrl *gomock.Controller) *FakeReadModel {
	mock := &FakeReadModel{ctrl: ctrl}
	mock.recorder = &FakeReadModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeReadModel) EXPECT() *FakeReadModelMockRecorder {
	return m.recorder
}

// GatherResources mocks base method.
func (m *FakeReadModel) GatherResources(ctx context.Context, filter *GatherFilter) (*TasksResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherResources", ctx, filter)
	ret0, _ := ret[0].(*TasksResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherResources indicates an expected call of GatherResources.
func (mr *FakeReadModelMockRecorder) GatherResources(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherResources", reflect.TypeOf((*FakeReadModel)(nil).GatherResources), ctx, filter)
}

// GetBasic mocks base method.
func (m *FakeReadModel) GetBasic(ctx context.Context, id string) (*TaskBasic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasic", ctx, id)
	ret0, _ := ret[0].(*TaskBasic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasic indicates an expected call of GetBasic.
func (mr *FakeReadModelMockRecorder) GetBasic(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasic", reflect.TypeOf((*FakeReadModel)(nil).GetBasic), ctx, id)
}

// GetFull mocks base method.
func (m *FakeReadModel) GetFull(ctx context.Context, id string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFull", ctx, id)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFull indicates an expected call of GetFull.
func (mr *FakeReadModelMockRecorder) GetFull(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFull", reflect.TypeOf((*FakeReadModel)(nil).GetFull), ctx, id)
}

// GetMinimal mocks base method.
func (m *FakeReadModel) GetMinimal(ctx context.Context, id string) (*TaskMinimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinimal", ctx, id)
	ret0, _ := ret[0].(*TaskMinimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinimal indicates an expected call of GetMinimal.
func (mr *FakeReadModelMockRecorder) GetMinimal(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinimal", reflect.TypeOf((*FakeReadModel)(nil).GetMinimal), ctx, id)
}

// ListAccounts mocks base method.
func (m *FakeReadModel) ListAccounts(ctx context.Context) ([]*AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", ctx)
	ret0, _ := ret[0].([]*AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *FakeReadModelMockRecorder) ListAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*FakeReadModel)(nil).ListAccounts), ctx)
}

// ListBasic mocks base method.
func (m *FakeReadModel) ListBasic(ctx context.Context, pageSize int, pageToken *utils.PageToken, filter *ListFilter) ([]*TaskBasic, *utils.PageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBasic", ctx, pageSize, pageToken, filter)
	ret0, _ := ret[0].([]*TaskBasic)
	ret1, _ := ret[1].(*utils.PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBasic indicates an expected call of ListBasic.
func (mr *FakeReadModelMockRecorder) ListBasic(ctx, pageSize, pageToken, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBasic", reflect.TypeOf((*FakeReadModel)(nil).ListBasic), ctx, pageSize, pageToken, filter)
}

// ListFull mocks base method.
func (m *FakeReadModel) ListFull(ctx context.Context, pageSize int, pageToken *utils.PageToken, filter *ListFilter) ([]*Task, *utils.PageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFull", ctx, pageSize, pageToken, filter)
	ret0, _ := ret[0].([]*Task)
	ret1, _ := ret[1].(*utils.PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFull indicates an expected call of ListFull.
func (mr *FakeReadModelMockRecorder) ListFull(ctx, pageSize, pageToken, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFull", reflect.TypeOf((*FakeReadModel)(nil).ListFull), ctx, pageSize, pageToken, filter)
}

// ListMinimal mocks base method.
func (m *FakeReadModel) ListMinimal(ctx context.Context, pageSize int, pageToken *utils.PageToken, filter *ListFilter) ([]*TaskMinimal, *utils.PageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMinimal", ctx, pageSize, pageToken, filter)
	ret0, _ := ret[0].([]*TaskMinimal)
	ret1, _ := ret[1].(*utils.PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMinimal indicates an expected call of ListMinimal.
func (mr *FakeReadModelMockRecorder) ListMinimal(ctx, pageSize, pageToken, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMinimal", reflect.TypeOf((*FakeReadModel)(nil).ListMinimal), ctx, pageSize, pageToken, filter)
}
