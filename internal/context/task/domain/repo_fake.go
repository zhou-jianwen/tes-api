// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/task/domain/repo.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FakeRepo is a mock of Repo interface.
type FakeRepo struct {
	ctrl     *gomock.Controller
	recorder *FakeRepoMockRecorder
}

// FakeRepoMockRecorder is the mock recorder for FakeRepo.
type FakeRepoMockRecorder struct {
	mock *FakeRepo
}

// NewFakeRepo creates a new mock instance.
func NewFakeRepo(ctrl *gomock.Controller) *FakeRepo {
	mock := &FakeRepo{ctrl: ctrl}
	mock.recorder = &FakeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeRepo) EXPECT() *FakeRepoMockRecorder {
	return m.recorder
}

// CheckIDExist mocks base method.
func (m *FakeRepo) CheckIDExist(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIDExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIDExist indicates an expected call of CheckIDExist.
func (mr *FakeRepoMockRecorder) CheckIDExist(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIDExist", reflect.TypeOf((*FakeRepo)(nil).CheckIDExist), ctx, id)
}

// Create mocks base method.
func (m *FakeRepo) Create(ctx context.Context, task *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *FakeRepoMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*FakeRepo)(nil).Create), ctx, task)
}

// GetStatus mocks base method.
func (m *FakeRepo) GetStatus(ctx context.Context, id string) (*TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, id)
	ret0, _ := ret[0].(*TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *FakeRepoMockRecorder) GetStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*FakeRepo)(nil).GetStatus), ctx, id)
}

// UpdateStatus mocks base method.
func (m *FakeRepo) UpdateStatus(ctx context.Context, taskStatus *TaskStatus) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, taskStatus)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *FakeRepoMockRecorder) UpdateStatus(ctx, taskStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*FakeRepo)(nil).UpdateStatus), ctx, taskStatus)
}
