// Code generated by MockGen. DO NOT EDIT.
// Source: internal/context/task/domain/service.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// FakeService is a mock of Service interface.
type FakeService struct {
	ctrl     *gomock.Controller
	recorder *FakeServiceMockRecorder
}

// FakeServiceMockRecorder is the mock recorder for FakeService.
type FakeServiceMockRecorder struct {
	mock *FakeService
}

// NewFakeService creates a new mock instance.
func NewFakeService(ctrl *gomock.Controller) *FakeService {
	mock := &FakeService{ctrl: ctrl}
	mock.recorder = &FakeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeService) EXPECT() *FakeServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *FakeService) Cancel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *FakeServiceMockRecorder) Cancel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*FakeService)(nil).Cancel), ctx, id)
}

// Create mocks base method.
func (m *FakeService) Create(ctx context.Context, task *Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *FakeServiceMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*FakeService)(nil).Create), ctx, task)
}

// Update mocks base method.
func (m *FakeService) Update(ctx context.Context, id string, state, clusterID *string, logs []*TaskLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, state, clusterID, logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *FakeServiceMockRecorder) Update(ctx, id, state, clusterID, logs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*FakeService)(nil).Update), ctx, id, state, clusterID, logs)
}
